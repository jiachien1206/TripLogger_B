{"version":3,"file":"static/js/535.958b5ead.chunk.js","mappings":"yRAEaA,GAAUC,EAAAA,EAAAA,KAAoB,SAAsBC,EAAwBC,GAAK,IAA1BC,EAAIF,EAAJE,KAAUC,GAAOC,EAAAA,EAAAA,GAAAJ,EAAAK,GAC3EC,EAAU,IAAIC,EAAAA,QAAeL,EAAMC,GACzC,OAAOK,EAAAA,EAAAA,GAAoBF,GAASG,EAAAA,EAAAA,IAAcR,EAAK,CACnDS,iBAAkBJ,IAE1B,IAAG,SAAuBK,EAAOC,EAAOC,GAChCD,EAAME,QAAUD,EAAUC,QACP,MAAfF,EAAME,MACNH,EAAMI,aAENJ,EAAMK,SAASJ,EAAME,OAGjC,I,kkvtKCCMG,GARUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2HAQZF,EAAAA,EAAAA,IAAOG,EAAAA,EAAPH,CAAoBI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8DAK5BG,EAAe,CACjBC,UAAW,UACXC,YAAa,EACbC,MAAO,OACPC,OAAQ,GA0DZ,EAvDY,WACR,IAAAC,EAA+CC,EAAAA,SAAe,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1DI,EAAgBF,EAAA,GAAEG,EAAkBH,EAAA,GAC3CI,EAAgCL,EAAAA,UAAe,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA9CE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BN,EAAAA,WAAgB,WACZ,IAAMS,EAAgB,eAAAtC,GAAAuC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,EAAQC,GAAQ,IAAAC,EAAAC,EAAA,OAAAN,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC1BC,EAAAA,EAAAA,eAAmBR,EAAQC,GAAU,KAAD,EAAhDC,EAAGG,EAAAI,KACHN,EAAcD,EAAI3C,KAAKA,KAC7B+B,EAAmBa,GACnBT,GAAY,GAAM,wBAAAW,EAAAK,OAAA,GAAAX,EAAA,KACrB,gBALqBY,EAAAC,GAAA,OAAAvD,EAAAwD,MAAA,KAAAC,UAAA,KAMlBC,EAAOC,OAAOC,aAAaC,QAAQ,QAGvCvB,EAFewB,KAAKC,MAAML,GAAMM,GACfL,OAAOC,aAAaC,QAAQ,YAEjD,GAAG,IAWH,OACII,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAAAF,SAAC,8BACPC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,CAAAH,UACFC,EAAAA,EAAAA,KAACnD,EAAK,CACFsD,UAAU,EACVC,iBAAiB,EACjBC,aAAa,EACbC,iBAAiB,EACjBC,QAAS,EACTC,KAAM,EACNC,OAAQ,CAAC,EAAG,GACZ/D,MAAO,CAAEgE,OAAQ,QAASC,OAAQ,KAAMZ,SAEvC/B,IACGgC,EAAAA,EAAAA,KAACtE,EAAO,CACJgB,MAAOS,EACPrB,KAAM8E,EAAAA,EACNC,cAAe,SAACC,EAASvE,IA5B5B,SAACuE,EAASvE,GAC3B,IAAMwE,EAAcD,EAAQE,WAAWC,MACvC1E,EAAM2E,UAAUH,EACpB,CA0B4BI,CAAaL,EAASvE,GAzB5B,SAACuE,EAASvE,GAC5B,IAAM6E,EAAOxD,EAAiByD,KAAI,SAACP,GAAO,OAAKA,EAAQM,IAAI,IACvDA,EAAKE,SAASR,EAAQE,WAAWO,SACjChF,EAAMK,SAAS,CAAEQ,UAAW,WAEpC,CAqB4BoE,CAAcV,EAASvE,EAC3B,UAO5B,C","sources":["../node_modules/react-leaflet/lib/GeoJSON.js","pages/User/Map/Map.jsx"],"sourcesContent":["import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { GeoJSON as LeafletGeoJSON } from 'leaflet';\nexport const GeoJSON = createPathComponent(function createGeoJSON({ data , ...options }, ctx) {\n    const geoJSON = new LeafletGeoJSON(data, options);\n    return createElementObject(geoJSON, extendContext(ctx, {\n        overlayContainer: geoJSON\n    }));\n}, function updateGeoJSON(layer, props, prevProps) {\n    if (props.style !== prevProps.style) {\n        if (props.style == null) {\n            layer.resetStyle();\n        } else {\n            layer.setStyle(props.style);\n        }\n    }\n});\n","import React from 'react';\nimport { MapContainer, GeoJSON } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport styled from 'styled-components';\nimport api from '../../../utils/api.js';\nimport mapData from './countries.json';\nimport { Block, Title } from '../Components';\n\nconst Wrapper = styled.div`\n    margin: 0 auto;\n    width: 720px;\n    height: 1000px;\n    padding: 5px;\n    background-color: #ffffff;\n`;\n\nconst Mymap = styled(MapContainer)`\n    background-color: #ffffff;\n    width: 580px;\n`;\n\nconst countryStyle = {\n    fillColor: '#f5f5f5',\n    fillOpacity: 1,\n    color: 'grey',\n    weight: 1,\n};\n\nconst Map = () => {\n    const [visitedcountries, setVistedcountries] = React.useState([]);\n    const [isLoaded, setIsloaded] = React.useState(false);\n    React.useEffect(() => {\n        const fetchUserVisited = async (userId, jwtToken) => {\n            const res = await api.getUserVisited(userId, jwtToken);\n            const userVistied = res.data.data;\n            setVistedcountries(userVistied);\n            setIsloaded(true);\n        };\n        let user = window.localStorage.getItem('user');\n        const userId = JSON.parse(user).id;\n        const jwtToken = window.localStorage.getItem('jwtToken');\n        fetchUserVisited(userId, jwtToken);\n    }, []);\n    const countryPopup = (country, layer) => {\n        const countryName = country.properties.ADMIN;\n        layer.bindPopup(countryName);\n    };\n    const renderVisited = (country, layer) => {\n        const iso3 = visitedcountries.map((country) => country.iso3);\n        if (iso3.includes(country.properties.ISO_A3)) {\n            layer.setStyle({ fillColor: '#37BEB0' });\n        }\n    };\n    return (\n        <>\n            <Title>旅遊足跡</Title>\n            <Block>\n                <Mymap\n                    dragging={false}\n                    scrollWheelZoom={false}\n                    zoomControl={false}\n                    doubleClickZoom={false}\n                    minZoom={1}\n                    zoom={1}\n                    center={[0, 0]}\n                    style={{ height: '550px', zIndex: '5' }}\n                >\n                    {isLoaded && (\n                        <GeoJSON\n                            style={countryStyle}\n                            data={mapData.features}\n                            onEachFeature={(country, layer) => {\n                                countryPopup(country, layer);\n                                renderVisited(country, layer);\n                            }}\n                        />\n                    )}\n                </Mymap>\n            </Block>\n        </>\n    );\n};\n\nexport default Map;\n"],"names":["GeoJSON","createPathComponent","_ref","ctx","data","options","_objectWithoutProperties","_excluded","geoJSON","LeafletGeoJSON","createElementObject","extendContext","overlayContainer","layer","props","prevProps","style","resetStyle","setStyle","Mymap","styled","_templateObject","_taggedTemplateLiteral","MapContainer","_templateObject2","countryStyle","fillColor","fillOpacity","color","weight","_React$useState","React","_React$useState2","_slicedToArray","visitedcountries","setVistedcountries","_React$useState3","_React$useState4","isLoaded","setIsloaded","fetchUserVisited","_asyncToGenerator","_regeneratorRuntime","mark","_callee","userId","jwtToken","res","userVistied","wrap","_context","prev","next","api","sent","stop","_x","_x2","apply","arguments","user","window","localStorage","getItem","JSON","parse","id","_jsxs","_Fragment","children","_jsx","Title","Block","dragging","scrollWheelZoom","zoomControl","doubleClickZoom","minZoom","zoom","center","height","zIndex","mapData","onEachFeature","country","countryName","properties","ADMIN","bindPopup","countryPopup","iso3","map","includes","ISO_A3","renderVisited"],"sourceRoot":""}